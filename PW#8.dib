#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №8. Реализация планировщика команд.

**Цель:** Реализация длительных операций.

**Результаты:** После выполнения работы Вы сможете:
1. Сделать возможным в потоке выполнять длительные операции.

## Задание.
Пусть, в условиях практической работы №7, у нас есть поток с очередью, который в цикле извлекает команды из очереди и выполняет их.

Некоторые из команд не могут выполнить всю работу за один вызов метода Execute без блокирования на длительное время выполнения всех остальных командд из очереди.

Например, если какая-нибудь сетевая игра представлена командой, то пока одна игра не закончится, следующая не начнется. Чтобы эффективнее использовать процессорные
можности, нужно обеспечить возхможность поиграть как можно большему количеству игроков.

Для этого используют режим псевдопараллельной обработки. Когда все время работы разбивают на небольшие отрезки, каждый из которых выполняется
за один вызов метода Execute. Чтобы выполнить всю работу, нужно вызвать метод Execute несколько раз, до тех пор пока работа не будет завершена.
Это позволяет между вызовами Execute одного экземплыра команды вызывать метод Execute других команд.

Так устроен, например, ренедринг страницы в браузере. Только в браузеоре это используется не для рендеренга всех вкладок, а для обработки 
реакций пользователя на странице.

В прошлой работе все команды, которые выполнялись в потоке, брались из очереди. Поэтому первая идея - это положить долгоиграющую операцию обратно в очередь.
Но это может привести к состоянию мертвой блокировки потока: если очередь будет полна, то поток, который попытается сделать запись, будет заблокирован до тех пор, 
пока в очереди не появится свободное место. Поэтому нельзя в одном и том же потоке читать и писать в очередь неблокируемым образом.

Чтобы избежать мертвой блокировки потока, необходимо ввести понятие Планировщика, который будет отвечать за выбор следующей длительной задачи для выполнения,
а чтение из очереди оставить только для новых операций. 

#!csharp

using System;
using System.Threading;
using System.Collections.Concurrent;

public interface ICommand
{
    void Execute();
    bool IsCompleted { get; } // Новое свойство для отслеживания завершения
}

public interface IScheduler
{
    bool HasCommand();
    ICommand Select();
    void Add(ICommand cmd);
}

public class RoundRobinScheduler : IScheduler
{
    private readonly ConcurrentQueue<ICommand> _commands = new ConcurrentQueue<ICommand>();
    private readonly ConcurrentQueue<ICommand> _runningCommands = new ConcurrentQueue<ICommand>();

    public bool HasCommand() => !_commands.IsEmpty || !_runningCommands.IsEmpty;

    public void Add(ICommand cmd) => _commands.Enqueue(cmd);

    public ICommand Select()
    {
        ICommand command = null;
        if (_runningCommands.TryDequeue(out command))
        {
            // Если команда не завершена, возвращаем ее
            if (!command.IsCompleted)
            {
                return command;
            }
            // Если команда завершена, удаляем ее из очереди
            return null;
        }
        else if (_commands.TryDequeue(out command))
        {
            // Добавляем новую команду в очередь выполняемых
            _runningCommands.Enqueue(command);
            return command;
        }
        return null;
    }
}

public class ServerThread
{
    private readonly ConcurrentQueue<ICommand> _commands = new ConcurrentQueue<ICommand>();
    private readonly IScheduler _scheduler = new RoundRobinScheduler();
    private bool _softStopFlag;
    private bool _hardStopFlag;
    private Thread _mainThread;

    public ServerThread()
    {
        _mainThread = new Thread(() =>
        {
            while (true)
            {
                // Обрабатываем команды из очереди
                ProcessCommands();

                // Проверка флагов остановки
                if (_hardStopFlag)
                {
                    Console.WriteLine("Получена команда жёсткой остановки, останавливаюсь");
                    break;
                }

                if (_softStopFlag && !_scheduler.HasCommand())
                {
                    Console.WriteLine("Получена команда мягкой остановки, останавливаюсь");
                    break;
                }

                // Если в очереди нет команд, ждем
                if (!_scheduler.HasCommand())
                {
                    Thread.Sleep(20);
                }
            }
        });

        _mainThread.Start();    }

    private void ProcessCommands()
    {
        ICommand command = _scheduler.Select();
        if (command != null)
        {
            try
            {
                command.Execute();
            }
            catch (Exception e)
            {
                Console.WriteLine($"Ошибка {e.Message}. Продолжаю работу, игнорируя команду!");
            }
        }
    }

    public int GetThreadId() => _mainThread.ManagedThreadId;

    public Thread GetThread() => _mainThread;

    public void SetSoftStop() => _softStopFlag = true;

    public void SetHardStop() => _hardStopFlag = true;

    public IScheduler GetScheduler() => _scheduler;

    public void AddCommand(ICommand c) => _commands.Enqueue(c);
}

// Пример долгоиграющей команды:
public class LongRunningCommand : ICommand
{
    private int _iterations;
    private int _currentIteration;

    public LongRunningCommand(int iterations)
    {
        _iterations = iterations;
        _currentIteration = 0;
    }

    public void Execute()
    {
        if (_currentIteration < _iterations)
        {
            Console.WriteLine($"LongRunningCommand: Iteration {_currentIteration + 1}");
            _currentIteration++;
            Thread.Sleep(100); // Симулируем долгую работу
        }
    }

    public bool IsCompleted => _currentIteration >= _iterations;
}

// Пример использования:

public class PrintCommand : ICommand
{
    private readonly string _msg;

    public PrintCommand(string msg)
    {
        _msg = msg;
    }

    public void Execute() => Console.WriteLine(_msg);

    public bool IsCompleted { get; } = true; 
}

public class Example
{
    public static void Main(string[] args)
    {
        ServerThread serverThread = new ServerThread();

        // Добавление долгоиграющих команд
        serverThread.AddCommand(new LongRunningCommand(5));
        serverThread.AddCommand(new LongRunningCommand(3));
        serverThread.AddCommand(new LongRunningCommand(2));

        // Добавление обычных команд (теперь корректно)
        serverThread.AddCommand(new PrintCommand("Команда 1"));
        serverThread.AddCommand(new PrintCommand("Команда 2"));

        // Ожидание завершения потока
        serverThread.GetThread().Join();

        Console.WriteLine("Поток завершен");
    }
}

#!markdown

Необходимо реализовать поток, который способен реализоввывать длительные операции.

**Указание.** 
1. В практической работе №7 из очереди команды извлекались блокируеммым образом с помощью метода Take(), при наличии планировщика так делать нельзя: поток
может заснуть несмотря на наличие команд в планировщике до тех пор, пока не будет записана новая команда в очередь.

С другой стороны, если будем всегда читать неблокируемым образом, а в планировщике нет никакой работы, то будем тратить процессорное время без полезной нагрузки.

Необходимо учесть этот момент при реализации очереди.

2. Для обепечения справедливости стратегии планировщика в слабом смысле использовать стратегию Round Robbin (циклическую) для определения следующего потока на исполнение.
